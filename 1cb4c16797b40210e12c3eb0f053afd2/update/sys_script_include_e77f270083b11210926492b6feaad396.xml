<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_509925_fc.FCCaseExtensionRepository</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>FCCaseExtensionRepository</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/**
 * Represents a repository for managing case extensions.
 * @class
 * @extends FCRepository
 */
var FCCaseExtensionRepository = Class.create();
FCCaseExtensionRepository.prototype = Object.extendsObject(FCRepository, {

	/**
	 * Initializes a new instance of the FCCaseExtensionRepository.
	 * @constructor
	 * @param {boolean} overrideACL - Whether to override Access Control List checks.
	 */
	initialize: function (overrideACL) {
		this.moduleName = 'FCCaseExtensionRepository';
		FCRepository.prototype.initialize.call(this, new FCConstantUtility().getTableName('case_extension'), overrideACL);
	},

	/**
	 * Retrieves a case extension by its system ID.
	 * @param {string} sysId - The system ID of the case extension.
	 * @param {boolean} isSerialized - If true, returns the result as a serialized Object; otherwise, returns as a GlideRecord.
	 * @returns {GlideRecord|Object} The case extension as a GlideRecord if isSerialized is false; otherwise as an Object.
	 */
	getById: function (sysId, isSerialized) {
		this.addQuery('sys_id=' + sysId);
		return this.getSingle(isSerialized);
	},

	/**
	 * Retrieves a case extension by the target task ID.
	 * @param {string} targetId - The ID of the target task.
	 * @returns {GlideRecord|Object} The case extension as a GlideRecord if not serialized; otherwise as an Object.
	 */
	getByTarget: function (targetId) {
		this.addQuery('request=' + targetId);
		return this.getSingle();
	},

	loadExtensionToTarget(formObj, targetId) {
		const extensionRepo = new FCCaseExtensionRepository(true);
		const extensionGr = new FCCaseExtensionRepository(true).getByTarget(targetId);

		if (!extensionGr) return;

		try {
			const extensionData = JSON.parse(extensionGr.getValue('data'));

			formObj.sections.forEach((section) => {
				section.questions.forEach((question) => {
					if (extensionData.hasOwnProperty(question.property)) {
						question.answer = extensionData[question.property];
					}
				});
			});
		} catch (error) {
			this.throwError(error, this.moduleName, arguments.callee.name);
		}
	},


	/** @type {string} Specifies the type of this repository. */
	type: 'FCCaseExtensionRepository'
});
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-06 18:11:55</sys_created_on>
        <sys_id>e77f270083b11210926492b6feaad396</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>FCCaseExtensionRepository</sys_name>
        <sys_package display_value="FC" source="x_509925_fc">1cb4c16797b40210e12c3eb0f053afd2</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="FC">1cb4c16797b40210e12c3eb0f053afd2</sys_scope>
        <sys_update_name>sys_script_include_e77f270083b11210926492b6feaad396</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-25 01:04:56</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>e77f270083b11210926492b6feaad396</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-06 18:11:55</sys_created_on>
        <sys_id>5a533bcc83711210926492b6feaad3d2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-06 18:11:55</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
