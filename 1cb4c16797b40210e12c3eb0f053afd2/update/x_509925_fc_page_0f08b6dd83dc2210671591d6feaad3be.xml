<?xml version="1.0" encoding="UTF-8"?><record_update table="x_509925_fc_page">
    <x_509925_fc_page action="INSERT_OR_UPDATE">
        <active>true</active>
        <add_to_menu>false</add_to_menu>
        <attributes><![CDATA[(function (params) {
    function initialize() {
        return {
            particleCount: 50,
            condition: true,
            brandName: "YourBrand",
            copyrightText: "Â© 2023 YourBrand. All rights reserved.",
            navLinks: [
                { id: 1, text: "Features", url: "#features" },
                { id: 2, text: "Solutions", url: "#solutions" },
                { id: 3, text: "Pricing", url: "#pricing" },
                { id: 4, text: "Contact", url: "#contact" }
            ],
            ctaButtonText: "Get Started",
            heroTitle: {
                line1: "Build the future with",
                line2: "Innovation."
            },
            // ... rest of your model data
        };
    }

    return {
        initialize: initialize
    };
})(params);]]></attributes>
        <base>false</base>
        <client_scripts><![CDATA[function execute(helpers) {
  function initialize() {
    // Register Alpine store for window dimensions
    if (window.Alpine) {
      Alpine.store('window', {
        width: window.innerWidth,
        height: window.innerHeight
      });
      
      // Register the particle animation component
      Alpine.data('particleAnimation', () => ({
        // Configuration
        config: {
          particleCount: 30,
          baseRadius: 100,
          variance: 50,
          speed: 0.3,
          colorStops: [
            { color: 'rgba(101, 74, 194, 0.8)', pos: 0 },
            { color: 'rgba(168, 85, 247, 0.6)', pos: 0.5 },
            { color: 'rgba(236, 72, 153, 0.4)', pos: 1 }
          ]
        },
        
        // State
        particles: [],
        canvas: null,
        ctx: null,
        animationFrame: null,
        time: 0,
        
        // Initialization
        init() {
          this.canvas = this.$el;
          this.ctx = this.canvas.getContext('2d');
          this.createParticles();
          
          // Handle window resize
          window.addEventListener('resize', () => {
            this.canvas.width = Alpine.store('window').width;
            this.canvas.height = Alpine.store('window').height;
          });
          
          // Start animation
          this.animate();
          
          // Cleanup
          this.$el.addEventListener('x-destroy', () => {
            cancelAnimationFrame(this.animationFrame);
          });
        },
        
        // Create organic particle formations
        createParticles() {
          const { particleCount, baseRadius, variance } = this.config;
          this.particles = [];
          
          // Create a central attractor point
          const center = {
            x: this.canvas.width / 2,
            y: this.canvas.height / 2
          };
          
          // Generate particles in organic clusters
          for (let i = 0; i < particleCount; i++) {
            // Angle for radial distribution
            const angle = (i / particleCount) * Math.PI * 2;
            
            // Distance from center with some variance
            const distance = baseRadius + (Math.random() * variance * 2 - variance);
            
            // Position with some randomness
            const x = center.x + Math.cos(angle) * distance;
            const y = center.y + Math.sin(angle) * distance;
            
            // Add some individual movement characteristics
            this.particles.push({
              x,
              y,
              originX: x,
              originY: y,
              radius: 2 + Math.random() * 3,
              speed: 0.1 + Math.random() * 0.3,
              angle: Math.random() * Math.PI * 2,
              frequency: 0.001 + Math.random() * 0.002
            });
          }
        },
        
        // Animation loop
        animate() {
          this.time += 0.005;
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
          
          // Draw connections first (behind particles)
          this.drawConnections();
          
          // Update and draw particles
          this.particles.forEach(particle => {
            this.updateParticle(particle);
            this.drawParticle(particle);
          });
          
          this.animationFrame = requestAnimationFrame(() => this.animate());
        },
        
        // Organic particle movement
        updateParticle(particle) {
          // Gentle floating motion with sine waves
          particle.angle += particle.frequency;
          particle.x = particle.originX + Math.cos(particle.angle * 2) * 20;
          particle.y = particle.originY + Math.sin(particle.angle) * 15;
          
          // Add some randomness
          particle.x += Math.cos(this.time + particle.originY * 0.01) * 2;
          particle.y += Math.sin(this.time + particle.originX * 0.01) * 2;
        },
        
        // Draw individual particle with glow effect
        drawParticle(particle) {
          const gradient = this.ctx.createRadialGradient(
            particle.x, particle.y, 0,
            particle.x, particle.y, particle.radius * 3
          );
          
          this.config.colorStops.forEach(stop => {
            gradient.addColorStop(stop.pos, stop.color);
          });
          
          this.ctx.beginPath();
          this.ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
          this.ctx.fillStyle = gradient;
          this.ctx.shadowBlur = 15;
          this.ctx.shadowColor = 'rgba(168, 85, 247, 0.5)';
          this.ctx.fill();
          this.ctx.shadowBlur = 0;
        },
        
        // Draw organic connections between particles
        drawConnections() {
          const { width, height } = this.canvas;
          const maxDistance = Math.min(width, height) * 0.2;
          
          this.particles.forEach((p1, i) => {
            this.particles.slice(i + 1).forEach(p2 => {
              const dx = p1.x - p2.x;
              const dy = p1.y - p2.y;
              const distance = Math.sqrt(dx * dx + dy * dy);
              
              if (distance < maxDistance) {
                const opacity = 1 - (distance / maxDistance);
                this.ctx.beginPath();
                this.ctx.moveTo(p1.x, p1.y);
                this.ctx.lineTo(p2.x, p2.y);
                this.ctx.strokeStyle = `rgba(168, 85, 247, ${opacity * 0.2})`;
                this.ctx.lineWidth = 1;
                this.ctx.stroke();
              }
            });
          });
        }
      }));
    }
    
    return { initialized: true };
  }

  return {
    initialize
  };
}]]></client_scripts>
        <css/>
        <is_homepage>false</is_homepage>
        <is_page_template>false</is_page_template>
        <route>ai</route>
        <settings>{}</settings>
        <sys_class_name>x_509925_fc_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-03-14 17:42:12</sys_created_on>
        <sys_id>0f08b6dd83dc2210671591d6feaad3be</sys_id>
        <sys_mod_count>76</sys_mod_count>
        <sys_name/>
        <sys_package display_value="FC" source="x_509925_fc">1cb4c16797b40210e12c3eb0f053afd2</sys_package>
        <sys_policy/>
        <sys_scope display_value="FC">1cb4c16797b40210e12c3eb0f053afd2</sys_scope>
        <sys_update_name>x_509925_fc_page_0f08b6dd83dc2210671591d6feaad3be</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-03-27 03:24:47</sys_updated_on>
        <template>[{"id":"w2v8i7","title":"Liquid","description":"Liquid","type":"liquid","css_classes":{"value":[],"options":[]},"css_styles":{"value":[]},"allowable_children":[],"children":[],"content":"","parent_id":"","config":{"content":"&lt;div class=\"min-vh-100 position-relative overflow-hidden bg-gray-900\" x-init=\"$scope.initialize()\"&gt;\r\n  &lt;!-- Animated Background Canvas --&gt;\r\n  &lt;canvas \r\n    x-data=\"particleAnimation()\" \r\n    x-init=\"init()\"\r\n    class=\"position-fixed top-0 left-0 w-full h-full pointer-events-none\"\r\n    :width=\"$store.window.width\" \r\n    :height=\"$store.window.height\"\r\n  &gt;&lt;/canvas&gt;\r\n  \r\n  &lt;!-- Your Content Goes Here --&gt;\r\n  &lt;div class=\"relative z-10\"&gt;\r\n    &lt;!-- Page content --&gt;\r\n  &lt;/div&gt;\r\n&lt;/div&gt;","css_classes":"","css_styles":"","form_id":"","task_id":"","target_id":"","type":"static","name":"","grid_xs":"","grid_sm":"","grid_md":"","grid_lg":"","grid_xl":"","header_tag":"h2","img_src":"","img_width":"","img_height":"","widget_id":"","options":"{}","container":""},"config_options":{}}]</template>
        <title>AI</title>
        <type>page</type>
    </x_509925_fc_page>
</record_update>
