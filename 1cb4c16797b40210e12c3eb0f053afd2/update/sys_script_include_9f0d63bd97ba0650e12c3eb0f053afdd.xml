<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_509925_fc.FCAttachmentRepository</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>FCAttachmentRepository</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/**
 * @class
 * Repository for interacting with the Attachment table in ServiceNow.
 * @extends FCRepository
 */
var FCAttachmentRepository = Class.create();
FCAttachmentRepository.prototype = Object.extendsObject(FCRepository, {

    /**
     * Initializes the FCAttachmentRepository.
     * @param {boolean} [overrideACL=false] - Determines whether to use GlideRecord (true) or GlideRecordSecure (false).
     */
    initialize: function (overrideACL) {
        this.moduleName = 'FCAttachmentRepository';
        this.table = 'sys_attachment';
        FCRepository.prototype.initialize.call(this, this.table, overrideACL);
    },

    /**
     * Creates an attachment in ServiceNow from a provided content string.
     * 
     * @param {string} content - The base64 encoded content prefixed with its data URI.
     * @param {string} fileName - The name for the created file.
     * @param {string} tableName - The ServiceNow table to attach the file to.
     * @param {string} tableSysId - The specific record's sys_id in the table to attach the file to.
     * @returns {GlideRecord} The created attachment GlideRecord.
     * @throws {Error} Throws an error if essential parameters are missing or content is in an invalid format.
     */
    create: function (content, fileName, tableName, tableSysId) {
        try {
            // Validate mandatory parameters
            if (!content || !fileName || !tableSysId || !tableName) {
                throw new Error('Missing required parameters: content, fileName, tableName, or tableSysId.');
            }

            // Parse the base64 content and content type
            var parsedData = this.parseBase64Content(content);
            if (!parsedData) {
                throw new Error('Invalid base64 content format.');
            }

            var recordGr = new GlideRecord(tableName);
            if (!recordGr.get(tableSysId)) {
                throw new Error('Record not found for table: ' + tableName + ' and sys_id: ' + tableSysId);
            }

            // Write the attachment
            var attachment = new GlideSysAttachment();
            return attachment.writeBase64(recordGr, fileName, parsedData.contentType, parsedData.content);
        } catch (err) {
            this.throwError(err, this.moduleName, arguments.callee.name);
        }
    },

    /**
     * Parses a base64 content string and extracts the content type and actual content.
     * 
     * @param {string} base64String - The base64 encoded content prefixed with its data URI.
     * @returns {Object|null} An object containing the content type and content, or null if invalid.
     */
    parseBase64Content: function (base64String) {
        try {
            var matches = base64String.match(/^data:(.+?);base64,(.+)$/);
            if (!matches || matches.length !== 3) {
                return null;
            }

            return {
                contentType: matches[1] || 'application/octet-stream', // Fallback to generic binary content type
                content: matches[2]
            };
        } catch (err) {
            this.throwError(err, this.moduleName, arguments.callee.name);
        }
    },


    /**
     * Retrieves the base64 content of an attachment in ServiceNow by its sys_id.
     * @param {string} id - The sys_id of the attachment to retrieve.
     * @returns {string} The base64 encoded content of the attachment.
     * @throws {Error} Throws an error if the user does not have access to the attachment's related record.
     */
    getBase64ById: function (id) {
        try {
            this.addQuery('sys_id=' + id);
            var attachmentGr = this.getSingle();

            var attachment = new GlideSysAttachment();
            return attachment.getContentBase64(attachmentGr);
        } catch (err) {
            this.throwError(err, this.moduleName, arguments.callee.name);
        }
    },

    /**
     * Retrieves the base64 content of an attachment associated with a specific PDF template by its sys_id in ServiceNow.
     * @param {string} id - The sys_id of the PDF template to retrieve the associated attachment for.
     * @returns {string} The base64 encoded content of the attachment.
     * @throws {Error} Throws an error if no attachment is found for the specified template.
     */
    getBase64ByTemplateId: function (id) {
        try {
            var templateGr = new PdfTemplateRepository(true).addQuery('sys_id=' + id).getSingle();
            var docRevisionGr = templateGr.document_revision.getRefRecord();

            this.addQuery('table_name=dms_document_revision^table_sys_id=' + docRevisionGr.getUniqueValue());
            var attachmentGr = this.getMultiple();

            if (attachmentGr.next()) {
                var attachment = new GlideSysAttachment();
                return attachment.getContentBase64(attachmentGr);
            } else {
                throw new Error('No attachment found.');
            }
        } catch (err) {
            this.throwError(err, this.moduleName, arguments.callee.name);
        }
    },

    /**
     * Retrieves an attachment record by its sys_id.
     * @param {string} sysId - The sys_id of the attachment to retrieve.
     * @param {boolean} [isSerialize=false] - Whether to serialize the record as a JSON object.
     * @returns {GlideRecord} The retrieved attachment record.
     */
    getById: function (sysId, isSerialize) {
        this.addQuery('sys_id=' + sysId);
        return this.getSingle(isSerialize);
    },

    /**
     * Deletes an attachment in ServiceNow by its sys_id.
     * @param {string} sysId - The sys_id of the attachment to delete.
     * @returns {boolean} True if the attachment was deleted successfully, false otherwise.
     */
    deleteById: function (sysId) {
        try {
            var attachment = new GlideSysAttachment();
            return attachment.deleteAttachment(sysId);
        }catch(err){
            this.throwError(err, this.moduleName, arguments.callee.name);
        }
        
    },

    /**
     * Type definition for easier identification of this script include.
     * @type {string}
     */
    type: 'FCAttachmentRepository'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-16 01:06:01</sys_created_on>
        <sys_id>9f0d63bd97ba0650e12c3eb0f053afdd</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>FCAttachmentRepository</sys_name>
        <sys_package display_value="FC" source="x_509925_fc">1cb4c16797b40210e12c3eb0f053afd2</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="FC">1cb4c16797b40210e12c3eb0f053afd2</sys_scope>
        <sys_update_name>sys_script_include_9f0d63bd97ba0650e12c3eb0f053afdd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-25 01:02:03</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>9f0d63bd97ba0650e12c3eb0f053afdd</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-13 22:07:54</sys_created_on>
        <sys_id>e77c202683f5d210926492b6feaad33a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-13 22:07:54</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
