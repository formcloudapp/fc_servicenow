<?xml version="1.0" encoding="UTF-8"?><record_update table="x_509925_fc_graphql_query_broker">
    <x_509925_fc_graphql_query_broker action="INSERT_OR_UPDATE">
        <ai_filter>false</ai_filter>
        <allow_selection>false</allow_selection>
        <base>false</base>
        <columns_configs>[{"label":"ID","pin":false,"search":false,"search_name":"sys_id","search_default":false,"sorting":false,"sort_name":"sys_id","sort_default":false,"template":"&lt;span x-text=\"value.toString()\"&gt;&lt;/span&gt;","transform":"function execute(value, record, service){\n\n    return {\n        value: value,\n        record: record\n    }\n}","search_choices":[],"editable":false,"value":"sys_id","display_type":"value"},{"label":"Short Description","pin":true,"search":true,"search_name":"short_description","search_default":false,"sorting":true,"sort_name":"short_description","sort_default":false,"template":"&lt;div class=\"p-2\"&gt;\r\n\t&lt;div class=\"mb-2\"&gt;\r\n\t\t&lt;a style=\"cursor: pointer;\" class=\"fw-bold\" @click=\"openArticle(record.sys_id.value)\"&gt;\r\n\t\t\t&lt;span x-text=\"value\"&gt;&lt;/span&gt;\r\n\t\t&lt;/a&gt;\r\n\t&lt;/div&gt;\r\n\t&lt;div&gt;&lt;span x-text=\"stripHTML(record.text.value)\"&gt;&lt;/span&gt;&lt;/div&gt;\r\n&lt;/div&gt;","transform":"function execute(value, record, service){\n\n    function stripHTML(html) {\n        let text = html.replace(/&lt;[^&gt;]*&gt;/gm, ' ').replace(/\\s+/g, ' ').trim();\n        let textArray = _decodeHTML(text).split(' ');\n        return textArray.splice(0, 75).join(' ') + '...';\n    }\n\n\n    function _decodeHTML(html) {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, \"text/html\");\n        return doc.documentElement.textContent;\n    }\n\n     function openArticle(articleId){\n        service.navigateToPage('fc_kb_article', {articleId: articleId});\n    }\n\n    return {\n        stripHTML: stripHTML,\n        value: value,\n        record: record,\n        openArticle: openArticle\n    }\n}","value":"short_description","search_choices":[],"editable":false,"display_type":"display"},{"label":"Text","pin":false,"search":true,"search_name":"text","search_default":false,"sorting":false,"sort_name":"text","sort_default":false,"template":"&lt;span x-text=\"value\"&gt;&lt;/span&gt;","transform":"function execute(value, record, service){\n\n    return {\n        value: value,\n        record: record\n    }\n}","value":"text","search_choices":[],"editable":false,"display_type":"display"},{"label":"Number","pin":true,"search":true,"search_name":"number","search_default":false,"sorting":false,"sort_name":"number","sort_default":false,"template":"&lt;mdui-button @click=\"openArticle(record.sys_id.value)\" variant=\"link\"&gt;\r\n    &lt;span x-text=\"value\"&gt;&lt;/span&gt;\r\n&lt;/mdui-button&gt;","transform":"function execute(value, record, service){\n\n    function openArticle(articleId){\n        service.navigateToPage('fc_kb_article', {articleId: articleId});\n    }\n    return {\n        value: value,\n        record: record,\n        openArticle: openArticle\n    }\n}","value":"number","search_choices":[],"editable":false,"display_type":"display"}]</columns_configs>
        <filter_builder><![CDATA[((current, params) => {

    if (!params.kb_category && !params.kb_knowledge_base) {

        return 'sys_id=NEVERFOUND';

    }else if((!params.kb_category && params.kb_knowledge_base) || (params.kb_category == params.kb_knowledge_base)){

        var categoryIds = new FCKnowledgeRepository(true).getAllCategories(params.kb_knowledge_base);
        return 'active=true^kb_categoryIN' + categoryIds.join(',');

    } else {
    
        var categoryIds = new FCKnowledgeRepository(true).getChildCategoryIds(params.kb_category);
        return 'active=true^kb_categoryIN' + categoryIds.join(',');

    }



})(current, params);]]></filter_builder>
        <filters table="kb_knowledge">^EQ<item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filters>
        <gql><![CDATA[function execute(params, configs) {
    let gql = '';
    if (configs.schema == 'ootb') {
        gql = `
		{
			GlideRecord_Query{
				${configs.table}(queryConditions: "${configs.filters}", pagination: { offset: ${configs.offset}, limit: ${configs.limit} }) {
					_rowCount
					_results ${configs.gql}
				}
			}
		}
	`;
    }else{
		gql = `
		{
			${configs.namespace}{
				${configs.gql_schema}{
					getMultiple(tableName: "${configs.table}", queryConditions: "${configs.filters}", pagination: { offset: ${configs.offset}, limit: ${configs.limit} })
					{
						sys_id{
							value
						}
						...on ${configs.namespace}_${configs.gql_schema}_${configs.table}  ${configs.gql}
					}
					getCount(tableName: "${configs.table}", queryConditions: "${configs.filters}")
				}
			}
		}
		`;
	}

    return gql;
}]]></gql>
        <gql_path/>
        <graphql_schema display_value="Core">99574c8e973e0650e12c3eb0f053af40</graphql_schema>
        <metadata>{}</metadata>
        <name>kb_knowledge</name>
        <number>GQL0001001</number>
        <record_details/>
        <record_script><![CDATA[function execute(record, service) {

    return {
        record: record
    }
}]]></record_script>
        <row_count_path/>
        <schema>custom</schema>
        <script><![CDATA[((current, params) => {
	const namespace = gs.getProperty(current.sys_scope.scope + '.graphql_namespace');
	const gqlSchemaGr = current.graphql_schema.getRefRecord();
    let datatableConfig = {
        table: current.getValue('table'),
        filters: current.getValue('filters'),
        allow_selection: current.getValue('allow_selection'),
        gql: current.getValue('gql'),
        details_template: current.getValue('record_details'),
		gql_path: current.getValue('schema') == 'ootb' ? ('GlideRecord_Query.' + current.getValue('table') + '._results') : (namespace + '.' + gqlSchemaGr.getValue('namespace')+ '.getMultiple'),
        row_count_path: current.getValue('schema') == 'ootb' ? ('GlideRecord_Query.' + current.getValue('table') + '._rowCount') : (namespace + '.' + gqlSchemaGr.getValue('namespace')+ '.getCount'),
        data_columns: JSON.parse(current.getValue('columns_configs')),
		schema: current.getValue('schema'),
		gql_schema: gqlSchemaGr.getValue('namespace')
    };

    return datatableConfig;

})(current, params);]]></script>
        <sys_class_name>x_509925_fc_graphql_query_broker</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-21 17:11:38</sys_created_on>
        <sys_id>311553eac32e12105214f90ed4013170</sys_id>
        <sys_mod_count>31</sys_mod_count>
        <sys_name>kb_knowledge</sys_name>
        <sys_package display_value="FC" source="x_509925_fc">1cb4c16797b40210e12c3eb0f053afd2</sys_package>
        <sys_policy/>
        <sys_scope display_value="FC">1cb4c16797b40210e12c3eb0f053afd2</sys_scope>
        <sys_update_name>x_509925_fc_graphql_query_broker_311553eac32e12105214f90ed4013170</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-19 14:56:36</sys_updated_on>
        <table>kb_knowledge</table>
    </x_509925_fc_graphql_query_broker>
</record_update>
