<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_509925_fc.FCDepartmentRepository</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>FCDepartmentRepository</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/**
 * Represents a repository for departments.
 * @class
 * @extends FCRepository
 */
var FCDepartmentRepository = Class.create();
FCDepartmentRepository.prototype = Object.extendsObject(FCRepository, {

    /**
     * Initialize a new instance of the FCDepartmentRepository.
     * @constructor
     * @param {boolean} overrideACL - Flag to override Access Control List.
     */
    initialize: function(overrideACL) {
		this.moduleName = 'FCDepartmentRepository';
        FCRepository.prototype.initialize.call(this, 'cmn_department', overrideACL);
    },

    /**
     * Get departments by business unit ID.
     * @param {string} businessUnitId - The ID of the business unit.
     * @param {boolean} isSerialized - Flag to determine if the results should be serialized.
     * @returns {Array<GlideRecord>|Array<Object>} An array of departments as GlideRecords if isSerialized is false, otherwise as Objects.
     */
    getByBusinessUnit: function(businessUnitId, isSerialized) {
        this.addQuery('business_unit=' + businessUnitId);
        return this.getMultiple(isSerialized);
    },

    /**
     * Get the department tree for a specific department ID.
     * @param {string} sysId - The system ID of the department.
     * @returns {Array<GlideRecord>|Array<Object>} An array representing the department tree as GlideRecords if isSerialized is false, otherwise as Objects.
     */
    getDepartmentTreeForId: function(sysId) {
        var departmentGr = this.getById(sysId, false); // Assuming always GlideRecord here
        var id = departmentGr.getValue('id');
        var code = parseInt(departmentGr.getValue('code'));

        var pairs = [];
        for (var i = 0; i <= code * 2; i += 2) {
            pairs.push(id.substring(i, i + 2));
        }

        var ids = [];
        for (var e = 0; e < pairs.length; e++) {
            var fullId = pairs.slice(0, e + 1).join('').padEnd(18, '0');
            ids.push(fullId);
        }
        return new FCDepartmentRepository(true).addQuery('idIN' + ids.join(',') + '^ORDERBYcode').getMultiple();
    },

    /** @type {string} The type of the repository. */
    type: 'FCDepartmentRepository'
});
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-16 01:11:16</sys_created_on>
        <sys_id>a75e2bbd97ba0650e12c3eb0f053afe0</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>FCDepartmentRepository</sys_name>
        <sys_package display_value="FC" source="x_509925_fc">1cb4c16797b40210e12c3eb0f053afd2</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="FC">1cb4c16797b40210e12c3eb0f053afd2</sys_scope>
        <sys_update_name>sys_script_include_a75e2bbd97ba0650e12c3eb0f053afe0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-28 15:39:49</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>a75e2bbd97ba0650e12c3eb0f053afe0</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-14 04:31:31</sys_created_on>
        <sys_id>3244462683bdd210926492b6feaad3bf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-14 04:31:31</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
