<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_509925_fc.SchemaCrawlerNormalized</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>SchemaCrawlerNormalized</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var SchemaCrawlerNormalized = Class.create();
SchemaCrawlerNormalized.prototype = {
  initialize: function() {
    // Holds definitions for all referenced tables to avoid duplication.
    this._definitions = {};
  },

  /**
   * Recursively crawls the schema for a given table.
   *
   * @param {String} tableName - The ServiceNow table name (e.g., "incident").
   * @param {Number} maxDepth - Maximum recursion depth.
   * @param {Number} currentDepth - Current recursion depth.
   * @returns {Object} - An object representing the table schema.
   */
  crawlTableSchema: function(tableName, maxDepth, currentDepth) {
    maxDepth = maxDepth || 2;
    currentDepth = currentDepth || 0;

    // Stop recursion if maximum depth is exceeded.
    if (currentDepth > maxDepth) {
      return null;
    }

    var schema = {
      table: tableName,
      fields: []
    };

    // Query the sys_dictionary table for metadata of the given table.
    var gr = new FCDictionaryRepository(true).getByTable(tableName);

    while (gr.next()) {
      var field = {
        column_name: gr.getValue('element'),
		column_label: gr.getValue('column_label'),
		max_length: gr.getValue('max_length'),
        type: gr.getValue('internal_type'),
        mandatory: gr.getValue('mandatory'),
        is_choice: ['0','2'].indexOf(gr.getValue('choice')) == -1
      };

      // If the field has choices, query the sys_choice table.
      if (field.is_choice) {
        field.choices = new FCChoiceRepository(true).getByTableField(tableName, field.column_name);
      }

      // Process reference fields.
      if (field.type === 'reference' && gr.getValue('reference')) {
        var refTable = gr.getValue('reference');
        // Use a JSON pointer to reference the normalized definition.
        field.reference = "#/definitions/" + refTable;

        // Only crawl and add the referenced table if it hasn't been processed yet.
        if (!this._definitions[refTable]) {
          var refSchema = this.crawlTableSchema(refTable, maxDepth, currentDepth + 1);
          if (refSchema) {
            this._definitions[refTable] = refSchema;
          }
        }
      }

      schema.fields.push(field);
    }

    return schema;
  },

  /**
   * Retrieves the normalized schema for the specified table.
   *
   * @param {String} tableName - The main table to crawl (e.g., "incident").
   * @param {Number} maxDepth - Maximum recursion depth.
   * @returns {Object} - Normalized JSON structure including definitions.
   */
  getNormalizedSchema: function(tableName, maxDepth) {
    // Reset definitions before crawling.
    this._definitions = {};

    var mainSchema = this.crawlTableSchema(tableName, maxDepth || 2, 0);
    var normalized = {
      table: mainSchema.table,
      fields: mainSchema.fields,
      definitions: this._definitions
    };
    return normalized;
  },

  type: 'SchemaCrawlerNormalized'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-02-27 03:33:40</sys_created_on>
        <sys_id>e9e52e9c83802210671591d6feaad39f</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>SchemaCrawlerNormalized</sys_name>
        <sys_package display_value="FC" source="x_509925_fc">1cb4c16797b40210e12c3eb0f053afd2</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="FC">1cb4c16797b40210e12c3eb0f053afd2</sys_scope>
        <sys_update_name>sys_script_include_e9e52e9c83802210671591d6feaad39f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-04-06 13:43:52</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>e9e52e9c83802210671591d6feaad39f</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-02-27 03:33:40</sys_created_on>
        <sys_id>87f5a61083802210671591d6feaad37b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-02-27 03:33:40</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
